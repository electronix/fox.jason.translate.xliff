<?xml version="1.0" encoding="UTF-8" standalone="no"?><!--ant-->
<!--
	This file is part of the DITA-OT Translate Plug-in project.
	See the accompanying LICENSE file for applicable licenses.
-->
<antlib xmlns:if="ant:if" xmlns:unless="ant:unless">

	<!--
		Iterator function to run a given macro against a set of files

		@param macro - A macro to run.
		@param fileset - A set of files
		@param dir - The input directory
		@param todir - The output directory
	-->
	<scriptdef language="javascript" name="iterate" src="${dita.plugin.fox.jason.translate.xliff.dir}/resource/iterate-fileset.js">
		<attribute name="macro"/>
		<attribute name="dir"/>
		<attribute name="todir"/>
		<element name="fileset" type="fileset"/>
	</scriptdef>

	<!--
		Reinserts a doctype into a file

		@param file    - The DITA file to clean up
	-->
	<scriptdef language="javascript" name="reinsert-doctype" src="${dita.plugin.fox.jason.translate.xliff.dir}/resource/reinsert-doctype.js">
		<attribute name="file"/>
		<attribute name="todir"/>
	</scriptdef>


	<!--
		Creates a skeleton file with placeholder text

		@param file - The name of the skelton file to create
		@param todir - The output directory
	-->
	<macrodef name="skeleton-file">
		<attribute name="file"/>
		<attribute name="todir" default=""/>
		<sequential>
			<local name="target.dita.id"/>
			<local name="placeholder.text"/>
			<local name="token.id"/>

			<basename property="target.dita.id" file="@{file}" suffix=".xml"/>
			<loadfile property="placeholder.text" srcFile="@{file}"/>
			<property name="token.id">@@@@@${target.dita.id}@@@@@</property>

			<replace dir="${output.dir}" token="${token.id}" value="${placeholder.text}">
				<include name="**/*"/>
			</replace>
		</sequential>
	</macrodef>


	<!--
		Calls a translation service and creates the translated texts

		@param file - The name of the XLIFF source file
		@param todir - The output directory
	-->
	<macrodef name="translate-source">
		<attribute name="file"/>
		<attribute name="todir"/>
		<sequential>
			<local name="source.file.name"/>
			<basename property="source.file.name" file="@{file}"/>


			<!-- Create a translated target file -->
			<bing-translate if:set="translate.bing" file="@{file}" out="@{todir}/${source.file.name}"/>
			<custom-translate if:set="translate.custom" file="@{file}" out="@{todir}/${source.file.name}"/>
			<dummy-translate if:set="translate.dummy" file="@{file}" out="@{todir}/${source.file.name}"/> 
			<watson-translate if:set="translate.watson" file="@{file}" out="@{todir}/${source.file.name}"/>
			<yandex-translate if:set="translate.yandex" file="@{file}" out="@{todir}/${source.file.name}"/>
		</sequential>
	</macrodef>

	<!--
		Dummy Translation. Copies untranslated text to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="dummy-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>
			<local name="source.text"/>
			<loadfile property="source.text" srcFile="@{file}"/>
			<echo file="@{out}" message="${source.text}"/>
		</sequential>
	</macrodef>

	<!--
		Watson Translation. Copies text translated by IBM cloud services to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="watson-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>

			<local name="watson.result"/>
			<local name="watson.out"/>
			<local name="watson.temp.file"/>
			<local name="watson.response"/>
			<local name="watson.translation"/>
			<local name="source.text"/>

			<replace taskname="source-text" file="@{file}" token="&quot;" value="\&quot;"/>
			<replace taskname="source-text" file="@{file}" token="${line.separator}" value="\n"/>
			<loadfile taskname="source-text" property="source.text" srcFile="@{file}"/>
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="watson.temp.file" suffix=".json"/>



			<exec taskname="watson-translate" executable="curl" osfamily="unix" 
				resultproperty="watson.result" outputproperty="watson.out" failOnError="false">
				<arg value="-X"/>
				<arg value="POST"/>
				<arg value="-u"/>
				<arg value="apikey:${watson.apikey}"/>
				<arg value="-H"/>
				<arg value="Content-Type: application/json"/> 
				<arg value="--output"/>
				<arg value="${watson.temp.file}"/>
				<arg value="--data"/>
				<arg value="{&quot;text&quot;: [&quot;${source.text}&quot;], &quot;model_id&quot;: &quot;${translate.from}-${translate.to}&quot;}"/>
				<arg value="-sS"/>
				<arg value="${watson.translate.url}?version=2018-05-01"/>
			</exec>
		    <echo taskname="watson-translate" level="verbose" message="${line.separator}${watson.out}"/>

		    
			<loadfile taskname="watson-translate" property="watson.response" srcFile="${watson.temp.file}"/>
			<watson-read-response text="${watson.response}"  outproperty="watson.translation"/>
			<echo taskname="target-text" message="${watson.translation}" file="@{out}"/>


		</sequential>
	</macrodef>

	<!--
		Watson Translation. Parses the response and extracts the translated text

		@param text - The response from IBM cloud services
		@param outproperty - The property to output to
	-->
	<scriptdef language="javascript" name="watson-read-response" src="${dita.plugin.fox.jason.translate.xliff.dir}/resource/watson-parse.js">
		<attribute name="text"/>
		<attribute name="outproperty"/>
	</scriptdef>	

	<!--
		Microsoft Translation. Copies text translated by Azure cloud services to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="bing-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>

			<local name="bing.result"/>
			<local name="bing.out"/>
			<local name="bing.temp.file"/>
			<local name="bing.response"/>
			<local name="bing.translation"/>
			<local name="source.text"/>


			<replace taskname="source-text" file="@{file}" token="translate=&quot;no&quot;" value="class=&quot;notranslate&quot;"/>
			<replace taskname="source-text" file="@{file}" token="&quot;" value="\&quot;"/>
			<loadfile taskname="source-text" property="source.text" srcFile="@{file}"/>
			

			
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="bing.temp.file" suffix=".txt"/>

			<exec taskname="bing-translate" executable="curl" osfamily="unix" 
				resultproperty="bing.result" outputproperty="bing.out">
				<arg value="-X"/>
				<arg value="POST"/>
			
				<arg value="-H"/>
				<arg value="Ocp-Apim-Subscription-Key: ${bing.apikey}"/>
				<arg value="-H"/>
				<arg value="Content-type: application/json"/>
				<arg value="-H"/>
				<arg value="Accept: application/json"/>
				<arg value="--output"/>
				<arg value="${bing.temp.file}"/>
				<arg value="--data"/>
				<arg value="[{&quot;Text&quot;: &quot;${source.text}&quot;}]"/>
				<arg value="-sS"/>
				<arg value="${bing.translate.url}?api-version=3.0&amp;from=${translate.from}&amp;to=${translate.to}&amp;textType=html"/>
			</exec>
			<loadfile  taskname="bing-translate" property="bing.response" srcFile="${bing.temp.file}"/>
			<bing-read-response text="${bing.response}" outproperty="bing.translation"/>
			<echo taskname="target-text" message="${bing.translation}" file="@{out}"/>
		</sequential>
	</macrodef>

	<!--
		Microsoft Translation. Parses the response and extracts the translated text

		@param text - The response from Azure services
		@param outproperty - The property to output to
	-->
	<scriptdef language="javascript" name="bing-read-response" src="${dita.plugin.fox.jason.translate.xliff.dir}/resource/bing-parse.js">
		<attribute name="text"/>
		<attribute name="outproperty"/>
	</scriptdef>

	<!--
		Yandex Translation. Copies text translated by Azure cloud services to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="yandex-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>

			<local name="yandex.result"/>
			<local name="yandex.out"/>
			<local name="yandex.temp.file"/>
			<local name="yandex.response"/>
			<local name="yandex.translation"/>
			<local name="source.text"/>


			<replace taskname="source-text" file="@{file}" token="translate=&quot;no&quot;" value="class=&quot;notranslate&quot;"/>
			<replace taskname="source-text" file="@{file}" token="&quot;" value="\&quot;"/>
			<loadfile taskname="source-text" property="source.text" srcFile="@{file}"/>
			

			
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="yandex.temp.file" suffix=".txt"/>

			<!--
				https://translate.yandex.net/api/v1.5/tr.json/translate?ui=en&key=trnsl.1.1.20190529T121244Z.a79373cf9522bfb1.1c607028c1bc972f5ff1ba702f67418745179c1f&lang=en-de&format=html
			-->
			<exec taskname="yandex-translate" executable="curl" osfamily="unix" 
				resultproperty="yandex.result" outputproperty="yandex.out">
				<arg value="-X"/>
				<arg value="POST"/>
				<arg value="-H"/>
				<arg value="Content-type: application/x-www-form-urlencoded"/>
				<arg value="-H"/>
				<arg value="Accept: application/json"/>
				<arg value="--output"/>
				<arg value="${yandex.temp.file}"/>
				<arg value="--data"/>
				<arg value="text=${source.text}"/>
				<arg value="-sS"/>
				<arg value="${yandex.translate.url}?ui=${translate.from}&amp;key=${yandex.apikey}&amp;lang=${translate.from}-${translate.to}&amp;format=html"/>
			</exec>
			<loadfile  taskname="yandex-translate" property="yandex.response" srcFile="${yandex.temp.file}"/>
			<yandex-read-response text="${yandex.response}" outproperty="yandex.translation"/>
			<echo taskname="target-text" message="${yandex.translation}" file="@{out}"/>
		</sequential>
	</macrodef>

	<!--
		Yandex Translation. Parses the response and extracts the translated text

		@param text - The response from Azure services
		@param outproperty - The property to output to
	-->
	<scriptdef language="javascript" name="yandex-read-response" src="${dita.plugin.fox.jason.translate.xliff.dir}/resource/yandex-parse.js">
		<attribute name="text"/>
		<attribute name="outproperty"/>
	</scriptdef>

	<!--
		Custon Translation. Copies text translated by a custom cloud service to a file
		- Not implemented yet.

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="custom-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>
			<fail/>
		</sequential>
	</macrodef>

	<!--
		Add a doctype to a directory containing DITA files

		@param toDir - The output location of the files
		@param dir  - The location of the files to process
		@param refid - The reference to a fileset
	-->
	<macrodef name="reinsert-doctypes">
		<attribute name="refid"/>
		<attribute name="dir"/>
		<sequential>
			<iterate macro="reinsert-doctype" dir="@{dir}">
				<fileset refid="@{refid}"/>
			</iterate>
		</sequential>
	</macrodef>


	<!--
		Replace skelton placeholders with content

		@param dir  - The location of the files to process
		@param refid - The reference to a fileset
	-->
	<macrodef name="skeleton-files">
		<attribute name="src"/>
		<attribute name="dir"/>
		<sequential>
			<iterate macro="skeleton-file" dir="@{dir}">
				<fileset refid="@{src}"/>
			</iterate>
		</sequential>
	</macrodef>

	<!--
		Auto translate source trans-units

		@param dir  - The location of the files to process
		@param refid - The reference to a fileset
	-->
	<macrodef name="translate-sources">
		<attribute name="src"/>
		<attribute name="dir"/>
		<attribute name="todir"/>
		<sequential>
			<iterate macro="translate-source" dir="@{dir}" todir="@{todir}">
				<fileset refid="@{src}"/>
			</iterate>
		</sequential>
	</macrodef>


	<!--
		Ensure that the Bing Translation service is authorized
	-->
	<macrodef name="bing-authorization">
		<sequential>
			<local name="bing.result"/>
			<local name="bing.out"/>
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="bing.auth.temp.file" suffix=".txt"/>

			<exec taskname="bing-auth" executable="curl" osfamily="unix" 
				resultproperty="bing.result" outputproperty="bing.out">
				<arg value="-X"/>
				<arg value="POST"/>
			
				<arg value="-H"/>
				<arg value="Ocp-Apim-Subscription-Key: ${bing.apikey}"/>
				<arg value="-H"/>
				<arg value="Content-type: application/x-www-form-urlencoded"/>
				<arg value="-H"/>
				<arg value="Content-length: 0"/>
				<arg value="--output"/>
				<arg value="${bing.auth.temp.file}"/>
				<arg value="-sS"/>
				<arg value="${bing.authentication.url}"/>
			</exec>
			<echo taskname="auth-bing" level="verbose" message="${line.separator}${bing.out}"/>
			<loadfile property="bing.bearer.token" srcFile="${bing.auth.temp.file}"/>

			<dita-ot-fail id="XLFF004F">
				<condition>
					<contains string="${bing.bearer.token}" substring="error"/>
				</condition>
			</dita-ot-fail>
		</sequential>
	</macrodef>

	<!--
		Read translations from a cache file and copy over approved
		translations

		@param xliff  - The XLIFF file to populate
		@param cache.file - A reference XLIFF file with existing translations.
	-->
	<macrodef name="approve-translations">
		<attribute name="xliff"/>
		<attribute name="cache.file"/>
		<sequential>
			<!-- Read the cache file to find if we already have approved translations. -->
			<mkdir dir="${dita.temp.dir}/cache1"/> 
			<mkdir dir="${dita.temp.dir}/cache2"/> 


			<!-- Extract each source language element to a file -->
			<xmltask taskname="xliff-read" source="@{xliff}">
				<call path="//trans-unit">
					<param default="" name="id" path="@id"/>
					<actions>
						<xmltask taskname="approved-read" source="@{cache.file}">
							<call path="//trans-unit[@id=@{id} and @approved='yes']">
								<actions>
									<xmltask taskname="approved-get" source="@{cache.file}">
										<copy path="//trans-unit[@id=@{id} and @approved='yes']/target" buffer="buffer"/>
									</xmltask>
									<xmltask taskname="approved-put" sourcebuffer="buffer" dest="${dita.temp.dir}/cache1/@{id}.xml"/>
								</actions>
							</call>
						</xmltask>
					</actions>
				</call>
			</xmltask>

			<!-- Remove the source tag to leave only the data within the source element -->
			<xslt taskname="source-xsl" destdir="${dita.temp.dir}/cache2"  extension=".xml" 
				style="${translate.customization.dir}/strip-source.xsl"  
				basedir="${dita.temp.dir}/cache1">
			</xslt>


			<!-- Take the processed text and replace the target element with approved translations -->
			<xmltask taskname="xliff-read" source="@{xliff}">
				<call path="//trans-unit">
					<param default="" name="id" path="@id"/>
					<actions>
						<local name="approved.file"/>
						<available file="${dita.temp.dir}/cache2/@{id}.xml" property="approved.file"
							value="yes"/>
						<property name="approved.file" value="no"/>
						<xmltask if:true="${approved.file}" taskname="target-put" source="@{xliff}" dest="@{xliff}">
							<replace path="//trans-unit[@id=@{id}]/target/text()" withText=""/>
							<insert path="//trans-unit[@id=@{id}]/target" 
								file="${dita.temp.dir}/cache2/@{id}.xml"/>
							<attr path="//trans-unit[@id=@{id}]" attr="approved" value="yes" /> 
						</xmltask>
					</actions>
				</call>
			</xmltask>

		</sequential>
	</macrodef>

	<macrodef name="load-service-urls">
		<sequential>
			<!-- IBM Cloud Services -->
			<property name="watson.translate.url" if:set="translate.url" 
				value="${translate.url}"/>
			<property name="watson.apikey" if:set="translate.apikey"
			 value="${translate.apikey}"/>

			<!-- Microsoft Azure -->
			<property name="bing.apikey" if:set="translate.apikey"
				value="${translate.apikey}"/>
			<property name="bing.translate.url" if:set="translate.url"
				value="${translate.url}"/>
			<property name="bing.authentication.url" if:set="translate.authentication.url"
				value="${translate.authentication.url}"/>

			<!-- Yandex -->
			<property name="yandex.translate.url" if:set="translate.url" 
				value="${translate.url}"/>
			<property name="yandex.apikey" if:set="translate.apikey"
			value="${translate.apikey}"/>

			<!-- Custom -->
			<property name="custom.translate.url" if:set="translate.url"
				value="${translate.url}"/>


			<!-- Fallback - load Service URLs from properties file -->
			<property file="${dita.plugin.fox.jason.translate.xliff.dir}/cfg/configuration.properties"/>

			<!-- Decide which auto-translation service to use -->
			<condition property="translate.bing">
				<equals arg1="${translate.service}" arg2="bing"/>
			</condition>
			<condition property="translate.watson">
				<equals arg1="${translate.service}" arg2="watson"/>
			</condition>
			<condition property="translate.dummy">
				<equals arg1="${translate.service}" arg2="dummy"/>
			</condition>
			<condition property="translate.custom">
				<equals arg1="${translate.service}" arg2="custom"/>
			</condition>
			<condition property="translate.yandex">
				<equals arg1="${translate.service}" arg2="yandex"/>
			</condition>
		</sequential>
	</macrodef>

</antlib>