<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<xliff __NS1:xmlns="urn:oasis:names:tc:xliff:document:2.0" srcLang="en" trgLang="de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:__NS1="http://www.w3.org/2000/xmlns/">
  <file id="1" original="/topic.dita">
    <skeleton href="./skl/topic.dita.skl"></skeleton>
    <unit fs:fs="title" id="59931" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Basic usage</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="15534" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e11">&lt;codeph&gt;</data>
        <data id="ed4e11">&lt;/codeph&gt;</data>
        <data id="sd4e13">&lt;codeph&gt;</data>
        <data id="ed4e13">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">You will need to include the
          <pc dataRefEnd="ed4e11" dataRefStart="sd4e11" fs:fs="code" id="d4e11">
            <mrk id="md4e11" translate="no" type="term">prism.css</mrk>
          </pc>and
          <pc dataRefEnd="ed4e13" dataRefStart="sd4e13" fs:fs="code" id="d4e13">
            <mrk id="md4e13" translate="no" type="term">prism.js</mrk>
          </pc>files you downloaded in your page. Example:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="57886" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e21">&lt;codeph&gt;</data>
        <data id="ed4e21">&lt;/codeph&gt;</data>
        <data id="sd4e23">&lt;codeph&gt;</data>
        <data id="ed4e23">&lt;/codeph&gt;</data>
        <data id="sd4e25">&lt;xref format="html" scope="external" href="https://www.w3.org/TR/html52/textlevel-semantics.html#the-code-element"&gt;</data>
        <data id="ed4e25">&lt;/xref&gt;</data>
        <data id="sd4e28">&lt;codeph&gt;</data>
        <data id="ed4e28">&lt;/codeph&gt;</data>
        <data id="sd4e30">&lt;codeph&gt;</data>
        <data id="ed4e30">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Prism does its best to encourage good authoring practices. Therefore,it only works with
          <pc dataRefEnd="ed4e21" dataRefStart="sd4e21" fs:fs="code" id="d4e21">
            <mrk id="md4e21" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>elements, since marking upcode without a
          <pc dataRefEnd="ed4e23" dataRefStart="sd4e23" fs:fs="code" id="d4e23">
            <mrk id="md4e23" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element is semantically invalid.
          <pc dataRefEnd="ed4e25" dataRefStart="sd4e25" fs:fs="a" fs:subFs="href,https://www.w3.org/TR/html52/textlevel-semantics.html#the-code-element" id="d4e25">According to the HTML5 spec</pc>, the recommended way to define a code language is a
          <pc dataRefEnd="ed4e28" dataRefStart="sd4e28" fs:fs="code" id="d4e28">
            <mrk id="md4e28" translate="no" type="term">language-xxxx</mrk>
          </pc>class, which is what Prism uses. Alternatively, Prism also supports a shorter version:
          <pc dataRefEnd="ed4e30" dataRefStart="sd4e30" fs:fs="code" id="d4e30">
            <mrk id="md4e30" translate="no" type="term">lang-xxxx</mrk>
          </pc>.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="50700" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e36">&lt;codeph&gt;</data>
        <data id="ed4e36">&lt;/codeph&gt;</data>
        <data id="sd4e38">&lt;codeph&gt;</data>
        <data id="ed4e38">&lt;/codeph&gt;</data>
        <data id="sd4e40">&lt;codeph&gt;</data>
        <data id="ed4e40">&lt;/codeph&gt;</data>
        <data id="sd4e42">&lt;codeph&gt;</data>
        <data id="ed4e42">&lt;/codeph&gt;</data>
        <data id="sd4e44">&lt;codeph&gt;</data>
        <data id="ed4e44">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">To make things easier however, Prism assumes that this language definition is inherited. Therefore, if multiple
          <pc dataRefEnd="ed4e36" dataRefStart="sd4e36" fs:fs="code" id="d4e36">
            <mrk id="md4e36" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>elements have the same language, you can add the
          <pc dataRefEnd="ed4e38" dataRefStart="sd4e38" fs:fs="code" id="d4e38">
            <mrk id="md4e38" translate="no" type="term">language-xxxx</mrk>
          </pc>class on one of their common ancestors. This way, you can also define a document-wide default language, by adding a
          <pc dataRefEnd="ed4e40" dataRefStart="sd4e40" fs:fs="code" id="d4e40">
            <mrk id="md4e40" translate="no" type="term">language-xxxx</mrk>
          </pc>class on the
          <pc dataRefEnd="ed4e42" dataRefStart="sd4e42" fs:fs="code" id="d4e42">
            <mrk id="md4e42" translate="no" type="term">&lt;body&gt;</mrk>
          </pc>or
          <pc dataRefEnd="ed4e44" dataRefStart="sd4e44" fs:fs="code" id="d4e44">
            <mrk id="md4e44" translate="no" type="term">&lt;html&gt;</mrk>
          </pc>element.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="46850" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e50">&lt;codeph&gt;</data>
        <data id="ed4e50">&lt;/codeph&gt;</data>
        <data id="sd4e52">&lt;codeph&gt;</data>
        <data id="ed4e52">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to opt-out of highlighting for a
          <pc dataRefEnd="ed4e50" dataRefStart="sd4e50" fs:fs="code" id="d4e50">
            <mrk id="md4e50" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element that is a descendant of an element with a declared code language, you can add the class
          <pc dataRefEnd="ed4e52" dataRefStart="sd4e52" fs:fs="code" id="d4e52">
            <mrk id="md4e52" translate="no" type="term">language-none</mrk>
          </pc>to it (or any non-existing language, really).</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="25020" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e59">&lt;xref format="html" scope="external" href="https://www.w3.org/TR/html5/grouping-content.html#the-pre-element"&gt;</data>
        <data id="ed4e59">&lt;/xref&gt;</data>
        <data id="sd4e62">&lt;codeph&gt;</data>
        <data id="ed4e62">&lt;/codeph&gt;</data>
        <data id="sd4e64">&lt;codeph&gt;</data>
        <data id="ed4e64">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">The
          <pc dataRefEnd="ed4e59" dataRefStart="sd4e59" fs:fs="a" fs:subFs="href,https://www.w3.org/TR/html5/grouping-content.html#the-pre-element" id="d4e59">recommended way to mark up a code block</pc>(both for semantics and for Prism) is a
          <pc dataRefEnd="ed4e62" dataRefStart="sd4e62" fs:fs="code" id="d4e62">
            <mrk id="md4e62" translate="no" type="term">&lt;pre&gt;</mrk>
          </pc>element with a
          <pc dataRefEnd="ed4e64" dataRefStart="sd4e64" fs:fs="code" id="d4e64">
            <mrk id="md4e64" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element inside, like so:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="34362" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e72">&lt;codeph&gt;</data>
        <data id="ed4e72">&lt;/codeph&gt;</data>
        <data id="sd4e74">&lt;codeph&gt;</data>
        <data id="ed4e74">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you use that pattern, the
          <pc dataRefEnd="ed4e72" dataRefStart="sd4e72" fs:fs="code" id="d4e72">
            <mrk id="md4e72" translate="no" type="term">&lt;pre&gt;</mrk>
          </pc>will automatically get the
          <pc dataRefEnd="ed4e74" dataRefStart="sd4e74" fs:fs="code" id="d4e74">
            <mrk id="md4e74" translate="no" type="term">language-xxxx</mrk>
          </pc>class (if it doesn&#8217;t already have it) and will be styled as a code block.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="25518" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e80">&lt;codeph&gt;</data>
        <data id="ed4e80">&lt;/codeph&gt;</data>
        <data id="sd4e82">&lt;codeph&gt;</data>
        <data id="ed4e82">&lt;/codeph&gt;</data>
        <data id="sd4e84">&lt;xref format="html" scope="external" href="https://prismjs.com/extending.html#api"&gt;</data>
        <data id="ed4e84">&lt;/xref&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to prevent any elements from being automatically highlighted, you can use the attribute
          <pc dataRefEnd="ed4e80" dataRefStart="sd4e80" fs:fs="code" id="d4e80">
            <mrk id="md4e80" translate="no" type="term">data-manual</mrk>
          </pc>on the
          <pc dataRefEnd="ed4e82" dataRefStart="sd4e82" fs:fs="code" id="d4e82">
            <mrk id="md4e82" translate="no" type="term">&lt;script&gt;</mrk>
          </pc>element you used for prism and use the
          <pc dataRefEnd="ed4e84" dataRefStart="sd4e84" fs:fs="a" fs:subFs="href,https://prismjs.com/extending.html#api" id="d4e84">API</pc>. Example:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="title" id="33578" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Usage with Webpack, Browserify, &amp; Other Bundlers</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="32784" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e96">&lt;codeph&gt;</data>
        <data id="ed4e96">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to use Prism with a bundler, install Prism with
          <pc dataRefEnd="ed4e96" dataRefStart="sd4e96" fs:fs="code" id="d4e96">
            <mrk id="md4e96" translate="no" type="term">npm</mrk>
          </pc>:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="19337" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e104">&lt;codeph outputclass="language-js"&gt;</data>
        <data id="ed4e104">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">You can then
          <pc dataRefEnd="ed4e104" dataRefStart="sd4e104" fs:fs="code" id="d4e104">
            <mrk id="md4e104" translate="no" type="term">import</mrk>
          </pc>into your bundle</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="10929" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e115">&lt;xref format="html" scope="external" href="https://github.com/mAAdhaTTah/babel-plugin-prismjs"&gt;</data>
        <data id="ed4e115">&lt;/xref&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">To make it easy to configure your Prism instance with only thelanguages and plugins you need, use the babel plugin,
          <pc dataRefEnd="ed4e115" dataRefStart="sd4e115" fs:fs="a" fs:subFs="href,https://github.com/mAAdhaTTah/babel-plugin-prismjs" id="d4e115">babel-plugin-prismjs</pc>. This will allow you to load the minimum number of languages and plugins to satisfy your needs. See that plugin's documentation for configuration details</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
  </file>
</xliff>

