<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<xliff srcLang="en" trgLang="de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:__NS1="http://www.w3.org/2000/xmlns/">
  <file id="1" original="/topic.dita">
    <skeleton href="./skl/topic.dita.skl"></skeleton>
    <unit fs:fs="title" id="59931" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Basic usage</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="15534" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e9">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e9">&lt;/codeph&gt;</data>
        <data id="sd4e12">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e12">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">You will need to include the
          <pc dataRefEnd="ed4e9" dataRefStart="sd4e9" fs:fs="code" id="d4e9">
            <mrk id="md4e9" translate="no" type="term">prism.css</mrk>
          </pc>and
          <pc dataRefEnd="ed4e12" dataRefStart="sd4e12" fs:fs="code" id="d4e12">
            <mrk id="md4e12" translate="no" type="term">prism.js</mrk>
          </pc>files you downloaded in your page. Example:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="57886" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e20">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e20">&lt;/codeph&gt;</data>
        <data id="sd4e23">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e23">&lt;/codeph&gt;</data>
        <data id="sd4e26">&lt;xref format="html" scope="external" href="https://www.w3.org/TR/html52/textlevel-semantics.html#the-code-element" class="- topic/xref "&gt;</data>
        <data id="ed4e26">&lt;/xref&gt;</data>
        <data id="sd4e29">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e29">&lt;/codeph&gt;</data>
        <data id="sd4e32">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e32">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Prism does its best to encourage good authoring practices. Therefore,it only works with
          <pc dataRefEnd="ed4e20" dataRefStart="sd4e20" fs:fs="code" id="d4e20">
            <mrk id="md4e20" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>elements, since marking upcode without a
          <pc dataRefEnd="ed4e23" dataRefStart="sd4e23" fs:fs="code" id="d4e23">
            <mrk id="md4e23" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element is semantically invalid.
          <pc dataRefEnd="ed4e26" dataRefStart="sd4e26" fs:fs="a" fs:subFs="href,https://www.w3.org/TR/html52/textlevel-semantics.html#the-code-element" id="d4e26">According to the HTML5 spec</pc>, the recommended way to define a code language is a
          <pc dataRefEnd="ed4e29" dataRefStart="sd4e29" fs:fs="code" id="d4e29">
            <mrk id="md4e29" translate="no" type="term">language-xxxx</mrk>
          </pc>class, which is what Prism uses. Alternatively, Prism also supports a shorter version:
          <pc dataRefEnd="ed4e32" dataRefStart="sd4e32" fs:fs="code" id="d4e32">
            <mrk id="md4e32" translate="no" type="term">lang-xxxx</mrk>
          </pc>.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="50700" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e38">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e38">&lt;/codeph&gt;</data>
        <data id="sd4e41">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e41">&lt;/codeph&gt;</data>
        <data id="sd4e44">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e44">&lt;/codeph&gt;</data>
        <data id="sd4e47">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e47">&lt;/codeph&gt;</data>
        <data id="sd4e50">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e50">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">To make things easier however, Prism assumes that this language definition is inherited. Therefore, if multiple
          <pc dataRefEnd="ed4e38" dataRefStart="sd4e38" fs:fs="code" id="d4e38">
            <mrk id="md4e38" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>elements have the same language, you can add the
          <pc dataRefEnd="ed4e41" dataRefStart="sd4e41" fs:fs="code" id="d4e41">
            <mrk id="md4e41" translate="no" type="term">language-xxxx</mrk>
          </pc>class on one of their common ancestors. This way, you can also define a document-wide default language, by adding a
          <pc dataRefEnd="ed4e44" dataRefStart="sd4e44" fs:fs="code" id="d4e44">
            <mrk id="md4e44" translate="no" type="term">language-xxxx</mrk>
          </pc>class on the
          <pc dataRefEnd="ed4e47" dataRefStart="sd4e47" fs:fs="code" id="d4e47">
            <mrk id="md4e47" translate="no" type="term">&lt;body&gt;</mrk>
          </pc>or
          <pc dataRefEnd="ed4e50" dataRefStart="sd4e50" fs:fs="code" id="d4e50">
            <mrk id="md4e50" translate="no" type="term">&lt;html&gt;</mrk>
          </pc>element.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="46850" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e56">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e56">&lt;/codeph&gt;</data>
        <data id="sd4e59">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e59">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to opt-out of highlighting for a
          <pc dataRefEnd="ed4e56" dataRefStart="sd4e56" fs:fs="code" id="d4e56">
            <mrk id="md4e56" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element that is a descendant of an element with a declared code language, you can add the class
          <pc dataRefEnd="ed4e59" dataRefStart="sd4e59" fs:fs="code" id="d4e59">
            <mrk id="md4e59" translate="no" type="term">language-none</mrk>
          </pc>to it (or any non-existing language, really).</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="25020" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e65">&lt;xref format="html" scope="external" href="https://www.w3.org/TR/html5/grouping-content.html#the-pre-element" class="- topic/xref "&gt;</data>
        <data id="ed4e65">&lt;/xref&gt;</data>
        <data id="sd4e68">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e68">&lt;/codeph&gt;</data>
        <data id="sd4e71">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e71">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">The
          <pc dataRefEnd="ed4e65" dataRefStart="sd4e65" fs:fs="a" fs:subFs="href,https://www.w3.org/TR/html5/grouping-content.html#the-pre-element" id="d4e65">recommended way to mark up a code block</pc>(both for semantics and for Prism) is a
          <pc dataRefEnd="ed4e68" dataRefStart="sd4e68" fs:fs="code" id="d4e68">
            <mrk id="md4e68" translate="no" type="term">&lt;pre&gt;</mrk>
          </pc>element with a
          <pc dataRefEnd="ed4e71" dataRefStart="sd4e71" fs:fs="code" id="d4e71">
            <mrk id="md4e71" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element inside, like so:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="34362" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e79">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e79">&lt;/codeph&gt;</data>
        <data id="sd4e82">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e82">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you use that pattern, the
          <pc dataRefEnd="ed4e79" dataRefStart="sd4e79" fs:fs="code" id="d4e79">
            <mrk id="md4e79" translate="no" type="term">&lt;pre&gt;</mrk>
          </pc>will automatically get the
          <pc dataRefEnd="ed4e82" dataRefStart="sd4e82" fs:fs="code" id="d4e82">
            <mrk id="md4e82" translate="no" type="term">language-xxxx</mrk>
          </pc>class (if it doesn&#8217;t already have it) and will be styled as a code block.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="25518" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e88">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e88">&lt;/codeph&gt;</data>
        <data id="sd4e91">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e91">&lt;/codeph&gt;</data>
        <data id="sd4e94">&lt;xref format="html" scope="external" href="https://prismjs.com/extending.html#api" class="- topic/xref "&gt;</data>
        <data id="ed4e94">&lt;/xref&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to prevent any elements from being automatically highlighted, you can use the attribute
          <pc dataRefEnd="ed4e88" dataRefStart="sd4e88" fs:fs="code" id="d4e88">
            <mrk id="md4e88" translate="no" type="term">data-manual</mrk>
          </pc>on the
          <pc dataRefEnd="ed4e91" dataRefStart="sd4e91" fs:fs="code" id="d4e91">
            <mrk id="md4e91" translate="no" type="term">&lt;script&gt;</mrk>
          </pc>element you used for prism and use the
          <pc dataRefEnd="ed4e94" dataRefStart="sd4e94" fs:fs="a" fs:subFs="href,https://prismjs.com/extending.html#api" id="d4e94">API</pc>. Example:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="title" id="33578" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Usage with Webpack, Browserify, &amp; Other Bundlers</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="32784" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e106">&lt;codeph class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e106">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to use Prism with a bundler, install Prism with
          <pc dataRefEnd="ed4e106" dataRefStart="sd4e106" fs:fs="code" id="d4e106">
            <mrk id="md4e106" translate="no" type="term">npm</mrk>
          </pc>:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="19337" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e116">&lt;codeph outputclass="language-js" class="+ topic/ph pr-d/codeph "&gt;</data>
        <data id="ed4e116">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">You can then
          <pc dataRefEnd="ed4e116" dataRefStart="sd4e116" fs:fs="code" id="d4e116">
            <mrk id="md4e116" translate="no" type="term">import</mrk>
          </pc>into your bundle</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="10929" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="sd4e127">&lt;xref format="html" scope="external" href="https://github.com/mAAdhaTTah/babel-plugin-prismjs" class="- topic/xref "&gt;</data>
        <data id="ed4e127">&lt;/xref&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">To make it easy to configure your Prism instance with only thelanguages and plugins you need, use the babel plugin,
          <pc dataRefEnd="ed4e127" dataRefStart="sd4e127" fs:fs="a" fs:subFs="href,https://github.com/mAAdhaTTah/babel-plugin-prismjs" id="d4e127">babel-plugin-prismjs</pc>. This will allow you to load the minimum number of languages and plugins to satisfy your needs. See that plugin's documentation for configuration details</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
  </file>
</xliff>

